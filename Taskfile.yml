version: '3'

env:
  UID:
    sh: id -u
  GID:
    sh: id -g
  TTY: ''

tasks:
  default:
    cmds:
      - task --list

  contribute:
    desc: Contribute by running dev tools
    cmds:
      - task: phpcs
      - task: phpstan
      - task: phpmd
      - task: phpunit

  # Composer
  composer:install:
    desc: Composer install
    cmds:
      - docker compose run --rm $TTY php composer install {{.CLI_ARGS | default "--no-cache --no-interaction --prefer-dist"}}

  composer:autoload:
    desc: Composer dump autoload
    cmds:
      - docker compose run --rm $TTY php composer dump-autoload {{.CLI_ARGS | default "--no-cache --no-interaction"}}

  composer:autoload:dev:
    desc: Composer dump autoload dev
    cmds:
      - task composer:autoload -- --dev --no-cache --no-interaction

  composer:require:
    desc: Composer require package
    summary: |
      task composer:require p="my/package"
    vars:
      PACKAGE: '{{.p}}'
    cmds:
      - docker compose run --rm $TTY php composer require {{.PACKAGE}} {{.CLI_ARGS | default "--no-cache"}}

  composer:remove:
    desc: Composer remove package
    summary: |
      task composer:remove p="my/package"
    vars:
      PACKAGE: '{{.p}}'
    cmds:
      - docker compose run --rm $TTY php composer remove {{.PACKAGE}} {{.CLI_ARGS | default "--no-cache"}}

  composer:update:
    desc: Composer update package
    summary: |
      task composer:update p="my/package"
    vars:
      PACKAGE: '{{.p}}'
    cmds:
      - docker compose run --rm $TTY php composer update {{.PACKAGE}} {{.CLI_ARGS | default "--no-cache"}}

  # Tools
  grum:init:
    desc: Init GrumPHP
    cmds:
      - docker compose run --rm $TTY php vendor/bin/grumphp git:init

  phpcs:
    desc: PHPCS dry run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/php-cs-fixer fix --dry-run -v --diff

  phpcs:fix:
    desc: PHPCS fix
    cmds:
      - docker compose run --rm $TTY php vendor/bin/php-cs-fixer fix -v

  phpmd:
    desc: PHPMD run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpmd src/ text phpmd.xml

  phpmd:strict:
    desc: PHPMD run with strict argument
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpmd --strict src/ text phpmd.xml

  phpmd:baseline:
    desc: PHPMD update baseline
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpmd --generate-baseline src/ text phpmd.xml

  phpstan:
    desc: PHPStan run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpstan analyse --error-format=table

  phpstan:baseline:
    desc: PHPStan update baseline
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpstan --generate-baseline

  phpunit:
    desc: PHPUnit run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpunit

  phpunit:config:
    desc: PHPUnit generate config
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpunit --generate-configuration

  rector:
    desc: Rector dry run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/rector --dry-run

  rector:fix:
    desc: Rector fix
    cmds:
      - docker compose run --rm $TTY php vendor/bin/rector

  mkdocs:
    desc: MkDocs build
    cmds:
      - docker run --rm -it -v $(pwd):/docs squidfunk/mkdocs-material:9.1 build

  mkdocs:live:
    desc: MkDocs development server
    vars:
      PORT: '{{.p | default "8001"}}'
    cmds:
      - docker run --rm -it -p {{.PORT}}:8000 -v $(pwd):/docs squidfunk/mkdocs-material:9.1
