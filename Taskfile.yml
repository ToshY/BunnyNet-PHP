version: '3'

env:
  UID:
    sh: id -u
  GID:
    sh: id -g
  TTY: ''
  API_SPEC_MANIFEST: https://toshy.github.io/bunnynet-openapi-specification/manifest.json

tasks:
  default:
    cmds:
      - task --list

  contribute:
    desc: Contribute by running dev tools
    cmds:
      - task: phpcs
      - task: phpstan
      - task: phpmd
      - task: phpunit

  # Composer
  composer:install:
    desc: Composer install
    cmds:
      - docker compose run --rm $TTY php composer install {{.CLI_ARGS | default "--no-cache --no-interaction --prefer-dist"}}

  composer:autoload:
    desc: Composer dump autoload
    cmds:
      - docker compose run --rm $TTY php composer dump-autoload {{.CLI_ARGS | default "--no-cache --no-interaction"}}

  composer:autoload:dev:
    desc: Composer dump autoload dev
    cmds:
      - task composer:autoload -- --dev --no-cache --no-interaction

  composer:require:
    desc: Composer require package
    summary: |
      task composer:require p="my/package"
    vars:
      PACKAGE: '{{.p}}'
    cmds:
      - docker compose run --rm $TTY php composer require {{.PACKAGE}} {{.CLI_ARGS | default "--no-cache"}}

  composer:remove:
    desc: Composer remove package
    summary: |
      task composer:remove p="my/package"
    vars:
      PACKAGE: '{{.p}}'
    cmds:
      - docker compose run --rm $TTY php composer remove {{.PACKAGE}} {{.CLI_ARGS | default "--no-cache"}}

  composer:update:
    desc: Composer update package
    summary: |
      task composer:update p="my/package"
    vars:
      PACKAGE: '{{.p}}'
    cmds:
      - docker compose run --rm $TTY php composer update {{.PACKAGE}} {{.CLI_ARGS | default "--no-cache"}}

  composer:audit:
    desc: Composer audit
    cmds:
      - docker compose run --rm $TTY php composer audit

  # Generator
  specs:maps:
    desc: Generate model mapping files from OpenAPI specs
    cmds:
      - docker compose run --rm $TTY php php /app/generator/Command/generate-maps.php

  specs:models:
    desc: Generate model from mapping file
    cmds:
      - docker compose run --rm $TTY php php /app/generator/Command/generate-models.php {{.CLI_ARGS | default "--log"}}

  specs:
    desc: Run maps and models generators
    cmds:
      - task: specs:maps
      - task: specs:models
      - task: specs:maps

  # Git
  git:hooks:
    desc: Setup git hooks
    silent: true
    cmds:
      - |
        APP_HOOKS_DIR="{{.ROOT_DIR}}/.githooks"
        GIT_HOOKS_DIR="{{.ROOT_DIR}}/.git/hooks"
        
        # Create the hooks directory if it does not exist
        mkdir -p "$GIT_HOOKS_DIR"

        # Symlink hooks
        for hook in $(ls "$APP_HOOKS_DIR"); do
          chmod +x "$APP_HOOKS_DIR/$hook"
          ln -sf "$APP_HOOKS_DIR/$hook" "$GIT_HOOKS_DIR/$hook"
        done

        printf "\033[32m%s\033[0m\n" "Git hooks installed."

  # Tools
  phpcs:
    desc: PHPCS dry run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/php-cs-fixer fix --dry-run -v --diff

  phpcs:fix:
    desc: PHPCS fix
    cmds:
      - docker compose run --rm $TTY php vendor/bin/php-cs-fixer fix -v

  phpmd:
    desc: PHPMD run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpmd src/ text phpmd.xml

  phpmd:strict:
    desc: PHPMD run with strict argument
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpmd --strict src/ text phpmd.xml

  phpmd:baseline:
    desc: PHPMD update baseline
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpmd --generate-baseline src/ text phpmd.xml

  phpstan:
    desc: PHPStan run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpstan analyse --error-format=table --memory-limit=256M

  phpstan:baseline:
    desc: PHPStan update baseline
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpstan --generate-baseline

  phpunit:
    desc: PHPUnit run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpunit

  phpunit:config:
    desc: PHPUnit generate config
    cmds:
      - docker compose run --rm $TTY php vendor/bin/phpunit --generate-configuration

  rector:
    desc: Rector dry run
    cmds:
      - docker compose run --rm $TTY php vendor/bin/rector --dry-run

  rector:fix:
    desc: Rector fix
    cmds:
      - docker compose run --rm $TTY php vendor/bin/rector

  mkdocs:
    desc: MkDocs build
    cmds:
      - docker run --rm -it -v $(pwd):/docs ghcr.io/squidfunk/mkdocs-material:9.6 build

  mkdocs:live:
    desc: MkDocs development server
    vars:
      PORT: '{{.p | default "8001"}}'
    cmds:
      - docker run --rm -it -p {{.PORT}}:8000 -v $(pwd):/docs ghcr.io/squidfunk/mkdocs-material:9.6
